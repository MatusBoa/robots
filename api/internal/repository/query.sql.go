// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    id, name
) VALUES (
    $1, $2
)
RETURNING id, name, created_at
`

type CreateProjectParams struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.ID, arg.Name)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const createProjectBot = `-- name: CreateProjectBot :one
INSERT INTO project_bots (
    id, project_id, name
) VALUES (
    $1, $2, $3
)
returning id, project_id, name, created_at
`

type CreateProjectBotParams struct {
	ID        pgtype.UUID
	ProjectID pgtype.UUID
	Name      string
}

func (q *Queries) CreateProjectBot(ctx context.Context, arg CreateProjectBotParams) (ProjectBot, error) {
	row := q.db.QueryRow(ctx, createProjectBot, arg.ID, arg.ProjectID, arg.Name)
	var i ProjectBot
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const getAllProjects = `-- name: GetAllProjects :many
SELECT id, name, created_at FROM projects
`

func (q *Queries) GetAllProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, getAllProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProject = `-- name: GetProject :one
SELECT id, name, created_at FROM projects
WHERE id = $1
`

func (q *Queries) GetProject(ctx context.Context, id pgtype.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getProjectBots = `-- name: GetProjectBots :many
SELECT id, project_id, name, created_at from project_bots
WHERE project_id = $1
`

func (q *Queries) GetProjectBots(ctx context.Context, projectID pgtype.UUID) ([]ProjectBot, error) {
	rows, err := q.db.Query(ctx, getProjectBots, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectBot
	for rows.Next() {
		var i ProjectBot
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
